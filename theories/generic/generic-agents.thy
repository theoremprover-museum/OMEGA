(agent~defmatrix defn-expand
   (agents (s-predicate (for line)
                        (uses )
			(level 3)		
                        (definition (agplan~contained-definition line)))
           (s-predicate (for line)
                        (uses definition)
			(level 3)
                        (definition (pred1 line (:param definition))))
	   (s-predicate (for line)
                        (uses definition position)
			(level 5)
                        (definition (pred2 line (:param definition) (:param position))))
	   (function (for definition)
		     (uses line)
		     (level 3)
		     (definition (agplan~contained-definition line)))
;           (function (for definition)
;                     (uses line position)
;                     (level 30)
;                     (definition (func1 line (:param position))))
          (function (for position)
                    (uses line)
                    (level 3)
                    (definition (car (data~substruct-positions (agplan~contained-definition
                                                           line)
                                                          line))))
	   (function (for position)
		     (uses line definition)
		     (level 3)
		     (definition (car (pred1 line (:param definition))))))
   (predicates
    (pred1 (line definition)
	    (data~positions line #'(lambda (x)
				     (and (term~constant-p x)
					  (keim~equal (th~definition-constant definition)
						      x)))))
    (pred2 (line definition position)
	   (find position (pred1 line definition)))
    (func1 (line position)
	   (when (find position (data~positions line #'term~constant-p))
	     (find-if
	      #'(lambda (x) (keim~equal (data~struct-at-position line position)
					(th~definition-constant x)))
	      (th~definitions-recursed (prob~theory (agplan~current-proof-plan))))))))


(agent~defmatrix defn-contract
   (agents (c-predicate (for line)
                        (uses )
			(level 3)
                        (definition (agplan~contained-definition line)))
           (c-predicate (for line)
                        (uses definition)
			(level 3)
                        (definition (pred1 line (:param definition))))
	   (c-predicate (for line)
                        (uses definition pos)
			(level 5)
                        (definition (pred2 line (:param definition) (:param pos))))
	   (function (for definition)
		     (uses line)
		     (level 3)
		     (definition (agplan~contained-definition line)))
	   (function (for definition pos)
		     (uses line)
		     (level 3)
		     (definition (agplan~get-definition&pos line)))
;           (function (for definition)
;                     (uses line pos)
;                     (level 30)
;                     (definition (func1 line (:param pos))))
           (function (for pos)
                     (uses line)
                     (level 3)
                     (definition (car (data~substruct-positions (agplan~contained-definition
                                                                 line)
                                                                line))))
	   (function (for pos)
		     (uses line definition)
		     (level 3)
		     (definition (car (pred1 line (:param definition))))))
   (predicates
    (pred1 (line definition)
	    (data~positions line #'(lambda (x)
				     (and (term~constant-p x)
					  (keim~equal (th~definition-constant definition)
						      x)))))
    (pred2 (line definition position)
	   (find position (pred1 line definition)))
    (func1 (line position)
	   (when (find position (data~positions line #'term~constant-p))
	     (find-if
	      #'(lambda (x) (keim~equal (data~struct-at-position line position)
					(th~definition-constant x)))
	      (th~definitions-recursed (prob~theory (agplan~current-proof-plan))))))))


(agent~defmatrix defn-expand*
   (agents (s-predicate (for line definition)
                        (exclude position-list)
			(multiple definition)
			(level 3)		
                        (definition  (when (not (agplan~repeated-line-p (:node
								      line)))
				       (let ((defs (agplan~contained-definitions line)))
					 (when defs (list defs))))))
	   (function (for position-list)
		     (uses line definition)
		     (level 3)
		     (definition (pred1 line (:param definition)))))
   (predicates
    (pred1 (line definition)
	    (data~positions line #'(lambda (x)
				     (and (term~constant-p x)
					  (not (keim~equal (logic~equivalence-constant) x))
					  (let ((const (th~definition-constant definition)))
					    (data~equal (if (data~schema-p const)
							    (data~schema-range const)
							  const)
							x))))))))

(agent~defmatrix defn-contract*
   (agents (c-predicate (for line definition)
                        (exclude position-list)
			(multiple definition)
			(level 3)
                        (definition (when (and (nic~introduction-p (:node line))
					       (not (agplan~repeated-line-p (:node
									  line))))
				      (let ((defs (agplan~contained-definitions line)))
					(when defs (list defs))))))
	   (function (for position-list)
		     (uses line definition)
		     (level 3)
		     (definition (pred1 line (:param definition)))))
   (predicates
    (pred1 (line definition)
	    (data~positions line #'(lambda (x)
				     (and (term~constant-p x)
					  ; (not (keim~equal (logic~equivalence-constant) x))
					  (let ((const (th~definition-constant definition)))
					    (data~equal (if (data~schema-p const)
							    (data~schema-range const)
							  const)
							x))))))))

#+weg(agent~defmatrix defse 	
   (agents (c-predicate (for concl)
                        (uses )
			(level 20)
                        (definition (not (agplan~contained-definition concl))))
	   (c-predicate (for concl)
                        (uses line2)
			(level 20)
                        (definition (gentac=substituted-definitions-p
				     concl line2 (func1 concl))))
	   (c-predicate (for concl)
                        (uses line2 defs)
			(level 20)
                        (definition  (gentac=substituted-definitions-p
				     concl line2 (:param defs))))
	   (s-predicate (for line2)
                        (uses )
			(level 20)
                        (definition (agplan~contained-definition line2)))
	   (s-predicate (for line2)
                        (uses concl)
			(level 20)
                        (definition (gentac=substituted-definitions-p
				     concl line2 (func1 concl))))
	   (s-predicate (for line2)
                        (uses concl defs)
			(level 20)
                        (definition (gentac=substituted-definitions-p
				     concl line2 (:param defs))))
	   (function    (for defs)
			(uses)
			(level 20)
			(definition (list '=)))
	   (function    (for defs)
			(uses concl)
			(level 20)
			(definition (cons '= (func1 concl))))
	   (function    (for defs)
			(uses concl line2)
			(level 20)
			(definition (if  (gentac=substituted-definitions-p
					  concl line2 (func1 concl))
					(cons '= (func1 concl))
				      (list '=)))))
   (predicates
    (func0 (line) (data~positions
		    line
		    #'(lambda (x)
			(and (term~constant-p x)
			     (th~find-assumption (keim~name x) (prob~theory
								(agplan~current-proof-plan)))))))
    (func1 (line) (mapcar #'(lambda (x)
			      (and (term~constant-p x)
				   (th~find-assumption (keim~name x) (prob~theory
								      (agplan~current-proof-plan)))))
			  (func0 line)))))


#+weg(agent~defmatrix defsi 	
   (agents (c-predicate (for concl)
                        (uses )
			(level 20)
                        (definition (agplan~contained-definition concl)))
	   (c-predicate (for concl)
                        (uses line2)
			(level 20)
                        (definition (gentac=substituted-definitions-p
				     line2 concl (func1 line2))))
	   (c-predicate (for concl)
                        (uses line2 defs)
			(level 20)
                        (definition  (gentac=substituted-definitions-p
				      line2 concl (:param defs))))
	   #+weg(s-predicate (for line2)
                        (uses )
			(level 20)
                        (definition (not (agplan~contained-definition line2))))
	   (s-predicate (for line2)
                        (uses concl)
			(level 20)
                        (definition (gentac=substituted-definitions-p
				     line2 concl (func1 line2))))
	   (s-predicate (for line2)
                        (uses concl defs)
			(level 20)
                        (definition (gentac=substituted-definitions-p
				     concl line2 (:param defs))))
	   #+weg(function  (for defs)
			(uses)
			(level 20)
			(definition (list (repr~find-definition '= (prob~theory omega*current-proof-plan)))))
	   (function    (for defs)
			(uses line2)
			(level 20)
			(definition (cons (repr~find-definition '= (prob~theory omega*current-proof-plan)) (func1 line2))))
	   (function    (for defs)
			(uses concl line2)
			(level 20)
			(definition (if (gentac=substituted-definitions-p
					   line2 concl (func1 line2))
					(cons (repr~find-definition '= (prob~theory omega*current-proof-plan)) (func1 line2))
				      (list (repr~find-definition '= (prob~theory omega*current-proof-plan)))))))
   (predicates
    (func0 (line) (data~positions
		    line
		    #'(lambda (x)
			(and (term~constant-p x)
			     (th~find-assumption (keim~name x) (prob~theory
								(agplan~current-proof-plan)))))))
    (func1 (line) (mapcar #'(lambda (x)
			      (and (term~constant-p x)
				   (th~find-assumption (keim~name x) (prob~theory
								      (agplan~current-proof-plan)))))
			  (func0 line)))))


#+weg(agent~defmatrix defn-expand* 
   (agents (s-predicate (for line)
                        (uses )
			(level 3)
                        (definition (agplan~contained-definition line)))
           (s-predicate (for line)
                        (uses definition)
			(level 10)
                        (definition (pred1 line (:param definition))))
	   (s-predicate (for line)
			(level 5)
                        (uses definition position-list)
                        (definition (pred2 line (:param definition) (:param position-list))))
	   (function (for definition)
		     (uses line)
		     (level 3)
		     (definition (agplan~contained-definition line)))
           (function (for definition)
		     (uses line position-list)
		     (level 20)
		     (definition (func1 line (:param position-list))))
	   (function (for position-list)
		     (uses line)
		     (level 3)
		     (definition (data~substruct-positions (agplan~contained-definition
							    line)
							   line)))
	   (function (for position-list)
		     (uses line definition)
		     (level 10)
		     (definition (pred1 line (:param definition)))))
   (predicates
    (pred1 (line definition)
	    (data~positions line #'(lambda (x)
				     (and (term~constant-p x)
					  (keim~equal (th~definition-constant definition)
						      x)))))
    (pred2 (line definition position-list)
	   (subsetp position-list (pred1 line definition)))
    (func1 (line position-list)
	   (when (every #'(lambda (x) (find x (data~positions line #'term~constant-p) :test #'keim~equal))
			position-list)
	     (find-if
	      #'(lambda (x) (keim~equal (data~struct-at-position line (car position-list))
						 (th~definition-constant x)))
	      (th~definitions-recursed (prob~theory (agplan~current-proof-plan))))))))


#+weg(agent~defmatrix defn-contract* 
   (agents (c-predicate (for line)
                        (uses )
			(level 3)
                        (definition (not (agplan~contained-definition line))))
           (c-predicate (for line)
                        (uses definition)
			(level 10)
                        (definition (pred1 line (:param definition))))
	   (c-predicate (for line)
                        (uses definition position-list)
			(level 5)
                        (definition (pred2 line (:param definition) (:param position-list))))
	   (function (for definition)
		     (uses line)
		     (level 3)
		     (definition (agplan~contained-definition line)))
           (function (for definition)
		     (uses line position-list)
		     (level 20)
		     (definition (func1 line (:param position-list))))
	   (function (for position-list)
		     (uses line)
		     (level 3)
		     (definition (data~substruct-positions (agplan~contained-definition
							    line)
							   line)))
	   (function (for position-list)
		     (uses line definition)
		     (level 20)
		     (definition (pred1 line (:param definition)))))
   (predicates
    (pred1 (line definition)
	    (data~positions line #'(lambda (x)
				     (and (term~constant-p x)
					  (keim~equal (th~definition-constant definition)
						      x)))))
    (pred2 (line definition position-list)
	   (subsetp position-list (pred1 line definition)))
    (func1 (line position-list)
	   (when (every #'(lambda (x) (find x (data~positions line #'term~constant-p) :test #'keim~equal))
			position-list)
	     (find-if
	      #'(lambda (x) (keim~equal (data~struct-at-position line (car position-list))
						 (th~definition-constant x)))
	      (th~definitions-recursed (prob~theory (agplan~current-proof-plan))))))))



